Problem 2: Robot Class
0.0/10.0 points (graded)

In ps2.py we provided you with the Robot class, which stores the position and direction of a robot. For this class, decide what fields you will use and decide how the following operations are to be performed:

    Initializing the object
    Accessing the robot's position
    Accessing the robot's direction
    Setting the robot's position
    Setting the robot's direction

Complete the Robot class by implementing its methods in ps2.py.

Note: When a Robot is initialized, it should clean the first tile it is initialized on. Generally the model these Robots will follow is that after a robot lands on a given tile, we will mark the entire tile as clean. This might not make sense if you're thinking about really large tiles, but as we make the size of the tiles smaller and smaller, this does actually become a pretty good approximation.

Although this problem has many parts, it should not take long once you have chosen how you wish to represent your data. For reasonable representations, a majority of the methods will require only a couple of lines of code.

Note: The Robot class is an abstract class, which means that we will never make an instance of it. Read up on the Python docs on abstract classes at this link and if you want more examples on abstract classes, follow this link.

In the final implementation of Robot, not all methods will be implemented. Not to worry -- its subclass(es) will implement the method updatePositionAndClean()

Robot motion rules

    Each robot has a position inside the room. We'll represent the position using coordinates (x, y) which are floats satisfying 0 ≤ x < w and 0 ≤ y < h. In our program we'll use instances of the Position class to store these coordinates.

    A robot has a direction of motion. We'll represent the direction using an integer d satisfying 0 ≤ d < 360, which gives an angle in degrees.

    All robots move at the same speed s, a float, which is given and is constant throughout the simulation. Every time-step, a robot moves in its direction of motion by s units.

    If a robot detects that it will hit the wall within the time-step, that time step is instead spent picking a new direction at random. The robot will attempt to move in that direction on the next time step, until it reaches another wall.

Termination

The simulation ends when a specified fraction of the tiles in the room have been cleaned.

--

Grader output

Test: 4 test setRobotPosition

        robot = Robot(RectangularRoom(5,8), 1.0)
        robot.getRobotPosition()
        loop 5 times: 
            * Generate random x, y values
            * Check if Position(x,y) is in the room
                * If so, robot.setRobotPosition(Position(x, y))
                * robot.getRobotPosition()

Test: 5 test setRobotDirection

        robot = Robot(RectangularRoom(5,8), 1.0)
        robot.getRobotDirection()
        loop 10 times: 
            * Generate random direction value
            * robot.setRobotDirection(randDirection)
            * robot.getRobotDirection()